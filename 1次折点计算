1次折点计算

2次折点计算
入口：折点List1
出口：折点List2

	折点
	|----int 日時; // YYYYMMDD
	|----String 位置; //SHLE
	|----int 高低; //(高。低)
	|----String 价格;
	|----int index;


    平台
    |----int i類型;	//  (0:高点 1:高台)
    |----int 高低; //(高。低)
	|----折点 開始折点; 
	|----折点 結束折点;  
	|----折点 最高价格折点; 
	|----折点 最低价格折点;
  
  
   圖形 extends 平台{
	
	|---int 属性; // 10=高臺M頭  11=高臺頭肩頂   20=收縮三角形
	|---int 方向; // 0=向上 1=向下
	|---float 高台_頸部最高價格;
	|---float 高台_頸線價格;
	|---折点 高台_第一折点;
	|---折点 高台_第二折点;
	
	|---float 三角形_大邊最低價格;
	|---float 三角形_大邊最高價格;
	|---float 三角形_破点價格;
	|---折点 三角形_第一折点;
	|---折点 三角形_第二折点;


排除幹擾計算【計算高點、高臺】
--------------------------------------
入口：折点List1
     折点List2
出口：平台List(不一定存在平台，存在的平台也不一定连续出现)
	
	平台： 1、高点附近存在1次折点的连续高低点
		  2、上记高低点的价格扎堆（不存在线性上升下降的情况）

    高台：平台+高位（大于前后的平台）


處理：
	折點List2裏抽取所有高點
	循環讀取每個高點
		取得折點List2裏相鄰的兩個高點
		判斷相鄰的兩個高點是不是就是折點List1裏下一個高點
		且
		相鄰兩個高點的價格是不是在對方 90%--110%之間
    	如果是，就是平臺，追加到平臺List中

		    平臺
		    |----int i類型;	// (M，頭肩，收縮三角形)
		    |----int 高低; //(高。低)
			|----折點 開始折點; 
			|----折點 結束折點;  
			|----折點 最高價格折點; 
			|----折點 最低價格折點;
		
		


排除幹擾計算【去掉不必要的折點】
--------------------------------------
入口：折點List2
     平臺List
出口：折點List3

	高點上下折點都無意義
	高臺上下折點第一折點有意義	
	低臺：頭肩頂、M頭以外。只留最高低點。

處理：
	再次取得高低點，得到折點List3
	






排除干扰计算【高点充实】
	高台附近。1次折点的连续高低点中，未被计入的也要追加折点
入口：折点List1
	  折点List3
      平台List
出口：平台List
      折点List3

處理：
	循環讀取每個折點



高臺圖形判斷:頭肩頂、M頭
      指定平臺是不是高臺
入口：平臺List
	 折點List3
出口：圖形List1

處理：
	循環讀取每個折點



圖形計算【高臺下跌圖形】
	 指定高臺是不是即將下跌
入口：圖形List1
	 折點List3
出口：圖形List2
	
處理：
	循環讀取每個折點



圖形計算【收縮三角形】判斷
	【排除幹擾後】2次多折點
入口：圖形List1
	 折點List3
出口：圖形List2

處理：
	循環讀取每個折點



圖形計算【收縮三角形上行圖形】
	指定三角形是不是即將上行
入口：圖形List
     折點List3
     平臺List
出口：圖形List2

處理：
	循環讀取每個折點



圖形計算【收縮三角形下降圖形】
	指定三角形是不是即將下降
入口：圖形List
     折點List3
     平臺List
出口：圖形List2

處理：
	循環讀取每個折點



圖形計算【低臺上行圖形】
	指定高臺是不是即將上行
入口：圖形List
     折點List3
     平臺List
出口：圖形List2

處理：
	循環讀取每個折點

