package GraphicalAnalysis;

import java.util.ArrayList;
import java.util.List;

import GraphicalAnalysis.Graphical.圖形計算;
import GraphicalAnalysis.Graphical.impl.圖形計算_收縮三角形;
import GraphicalAnalysis.Platform.平臺計算;
import GraphicalAnalysis.Platform.高臺計算Util;
import GraphicalAnalysis.Platform.impl.低臺計算;
import GraphicalAnalysis.Platform.impl.高臺計算;
import OutputData.圖形;
import OutputData.平台;
import OutputData.折点;
import OutputData.頸線;
import ParseTool2.輸出頸線圖數據2;
import common.CommonConst;

public class 圖形解析2 {
	public static void main(String[] args) {
		String[][] arrayList折点 =
			{
					{"20190327", "S", "1", "11.11", "0" }, {"20190328", "L", "0", "10.90", "1" }, 
					{"20190408", "H", "1", "11.96", "2" }, {"20190411", "L", "0", "11.35", "3" }, 
					{"20190419", "H", "1", "12.20", "4" }, {"20190426", "L", "0", "11.28", "5" }, 
					{"20190430", "H", "1", "12.09", "6" }, {"20190510", "L", "0", "11.06", "7" }, 
					{"20190514", "H", "1", "11.44", "8" }, {"20190517", "L", "0", "11.20", "9" }, 
					{"20190521", "H", "1", "11.45", "10"}, {"20190523", "L", "0", "10.95", "11"}, 
					{"20190528", "H", "1", "11.30", "12"}, {"20190530", "L", "0", "11.03", "13"}, 
					{"20190610", "H", "1", "11.70", "14"}, {"20190611", "L", "0", "11.27", "15"}, 
					{"20190620", "H", "1", "12.32", "16"}, {"20190625", "L", "0", "11.51", "17"}, 
					{"20190627", "H", "1", "11.84", "18"}, {"20190628", "L", "0", "11.54", "19"}, 
					{"20190701", "H", "1", "11.92", "20"}, {"20190708", "L", "0", "11.31", "21"}, 
					{"20190712", "H", "1", "11.62", "22"}, {"20190715", "L", "0", "11.22", "23"}, 
					{"20190716", "H", "1", "11.57", "24"}, {"20190718", "L", "0", "11.45", "25"}, 
					{"20190719", "H", "1", "11.63", "26"}, {"20190723", "L", "0", "11.43", "27"}, 
					{"20190725", "H", "1", "11.96", "28"}, {"20190729", "L", "0", "11.80", "29"}, 
					{"20190730", "H", "1", "12.00", "30"}, {"20190806", "L", "0", "10.97", "31"}, 
					{"20190814", "H", "1", "11.48", "32"}, {"20190819", "L", "0", "11.08", "33"}, 
					{"20190820", "H", "1", "11.47", "34"}, {"20190821", "L", "0", "11.34", "35"}, 
					{"20190823", "H", "1", "11.59", "36"}, {"20190826", "L", "0", "11.15", "37"}, 
					{"20190827", "H", "1", "11.57", "38"}, {"20190829", "L", "0", "11.18", "39"}, 
					{"20190905", "H", "1", "11.74", "40"}, {"20190906", "L", "0", "11.58", "41"}, 
					{"20190912", "H", "1", "12.09", "42"}, {"20190917", "L", "0", "11.77", "43"}, 
					{"20190918", "H", "1", "12.00", "44"}, {"20190923", "L", "0", "11.68", "45"}, 
					{"20190926", "H", "1", "12.18", "46"}, {"20190927", "L", "0", "11.76", "47"}, 
					{"20191014", "H", "1", "13.22", "48"}, {"20191015", "L", "0", "12.86", "49"}, 
					{"20191016", "H", "1", "13.33", "50"}, {"20191018", "L", "0", "12.72", "51"}, 
					{"20191022", "H", "1", "13.05", "52"}, {"20191023", "L", "0", "12.77", "53"}, 
					{"20191024", "H", "1", "13.24", "54"}, {"20191101", "L", "0", "12.44", "55"}, 
					{"20191105", "H", "1", "13.19", "56"}, {"20191114", "L", "0", "12.10", "57"}, 
					{"20191118", "H", "1", "12.35", "58"}, {"20191121", "L", "0", "11.91", "59"}, 
					{"20191126", "H", "1", "12.17", "60"}, {"20191204", "L", "0", "11.70", "61"}, 
					{"20191217", "H", "1", "12.51", "62"}, {"20191218", "L", "0", "12.34", "63"}, 
					{"20191220", "H", "1", "12.55", "64"}, {"20191223", "L", "0", "12.17", "65"}, 
					{"20191227", "H", "1", "12.43", "66"}, {"20191230", "L", "0", "12.12", "67"}, 
					{"20200106", "H", "1", "12.65", "68"}, {"20200108", "L", "0", "12.25", "69"}, 
					{"20200114", "H", "1", "12.69", "70"}, {"20200116", "L", "0", "12.16", "71"}
			};
		
		List<折点> 折点list1 = new ArrayList();
		for(String[] array折点 : arrayList折点){
			折点list1.add(new 折点(
				array折点[0],
				array折点[1],
				array折点[2],
				array折点[3],
				array折点[4]
				));
		}
		
		
		String[][] arrayList折点2 =
		{
			{"20190327", "S", "1", "11.11", "0"}, 
			{"20190328", "L", "0", "10.90", "1"}, 
			{"20190419", "H", "1", "12.20", "4"}, 
			{"20190510", "L", "0", "11.06", "7"}, 
			{"20190521", "H", "1", "11.45", "10"}, 
			{"20190523", "L", "0", "10.95", "11"}, 
			{"20190620", "H", "1", "12.32", "16"}, 
			{"20190625", "L", "0", "11.51", "17"}, 
			{"20190701", "H", "1", "11.92", "20"}, 
			{"20190715", "L", "0", "11.22", "23"}, 
			{"20190730", "H", "1", "12.00", "30"}, 
			{"20190806", "L", "0", "10.97", "31"}, 
			{"20190814", "H", "1", "11.48", "32"}, 
			{"20190819", "L", "0", "11.08", "33"}, 
			{"20190823", "H", "1", "11.59", "36"}, 
			{"20190826", "L", "0", "11.15", "37"}, 
			{"20190912", "H", "1", "12.09", "42"}, 
			{"20190923", "L", "0", "11.68", "45"}, 
			{"20191016", "H", "1", "13.33", "50"}, 
			{"20191018", "L", "0", "12.72", "51"}, 
			{"20191024", "H", "1", "13.24", "54"}, 
			{"20191114", "L", "0", "12.10", "57"}, 
			{"20191118", "H", "1", "12.35", "58"}, 
			{"20191204", "L", "0", "11.70", "61"}, 
			{"20191220", "H", "1", "12.55", "64"}, 
			{"20191230", "L", "0", "12.12", "67"}, 
			{"20200114", "H", "1", "12.69", "70"}, 
			{"20200116", "L", "0", "12.16", "71"}};
		
		List<折点> 折点list2 = new ArrayList();
		for(String[] array折点 : arrayList折点2){
			折点list2.add(new 折点(
				array折点[0],
				array折点[1],
				array折点[2],
				array折点[3],
				array折点[4]
				));
		}
		
		List<頸線> 頸線list =  new 圖形解析2().輸出圖形解析結果(折点list1,折点list2);
		

	}
	
	
	List<頸線> 輸出圖形解析結果(List<折点> 折点list1, List<折点> 折点list2) {
		
		
		List<圖形> 圖形list = new 圖形解析2().o圖形解析(折点list1, 折点list2);
		
		List<頸線> 頸線list = new 圖形解析2().輸出頸線圖數據(圖形list, (float)0.1);
		
		return 頸線list;
		
	}


	private List<頸線> 輸出頸線圖數據(List<圖形> 圖形list, float f) {		
		
		
		return null;
	}


	private List<圖形> o圖形解析(List<折点> 折点list1, List<折点> 折点list2) {
		
		 List<圖形> o圖形解析list = new ArrayList();
		
		// 第三次折点计算
		List<折点> 折点list3 = new 輸出頸線圖數據2().輸出折線圖數據(折点list2);
		
		List<平台> 平台list = new 高臺計算Util().解析出高低臺信息(折点list1, 折点list2, 折点list3);
		
		/*
		 * 是高臺還是低臺，在圖形計算時再去解析，
		 * 還是在最初平臺計算時就清楚的標記
		 * 問題
		 * 		1、是否解决了低台上升的需求
		 * 			答：在开始只是解析了平台，并未与其他平台比较就无法得知是高还是低
		 * 
		 *      2、如何解决低台上升的图形计算（提取图形数据，驗證指標圖）
		 *      	答：先解决低台的识别（与其他平台比较）后再计算图形
		 *      
		 *      3、如何解决低位三角形要下降的图形计算
		 *      	答：先解决三角形的识别后再计算上或下的图形计算
		 *      
		 *      4、如何真的要重写，如何解决三角形与高低台同时计算的需求
		 *      	答：各算个的。
		 */	
		
		 List<圖形> 圖形_高低平台list = o圖形解析_高低平台(折点list1, 折点list2, 折点list3, 平台list);
		 
		 List<圖形> 圖形_三角形list = o圖形解析_三角形(折点list1, 折点list2, 折点list3, 平台list);
		
		 o圖形解析list.addAll(圖形_高低平台list);
		 
		 o圖形解析list.addAll(圖形_三角形list);
		 
		return o圖形解析list;
	}


	private List<圖形> o圖形解析_三角形(List<折点> 折点list1, List<折点> 折点list2, List<折点> 折点list3, List<平台> 平台list) {
		// 設置高低平臺(与其他平台比较就无法得知是高还是低)
		
		List<圖形> o圖形解析_三角形list = new ArrayList();
		平台list = new 高臺計算Util().設置高低平臺(平台list, 折点list3);
		平臺計算 o平臺計算 = null;
		
		// 高臺計算
		高臺計算Util o高臺計算Util = new 高臺計算Util();
		
		// 排除幹擾
		List<折点>折點list_優化後 = o高臺計算Util.排除幹擾(折点list2, 折点list3, 平台list);		
		
		// 圖形計算_收縮三角形
		圖形計算 o圖形計算_收縮三角形 = new 圖形計算_收縮三角形();		
		List<圖形> 圖形_收縮三角形list = o圖形計算_收縮三角形.計算(折點list_優化後, 平台list, 折点list3);
		
		// 
		圖形_收縮三角形list = new 高臺計算Util().設置高低三角形(圖形_收縮三角形list, 折点list3);
		
		圖形計算1 o圖形計算_收縮三角形1 = new o圖形計算_收縮三角形1();
		
		// 圖形計算
		for(圖形 t : 圖形_收縮三角形list) {
			
			圖形 o圖形 =  o圖形計算_收縮三角形1.趨勢計算(t, 折点list1, 折点list2, 折点list3);
			o圖形解析_三角形list.add(o圖形);
		}
		
		return o圖形解析_三角形list;
	}


	private List<圖形> o圖形解析_高低平台(List<折点> 折点list1, List<折点> 折点list2, List<折点> 折点list3, List<平台> 平台list) {
		// 設置高低平臺(与其他平台比较就无法得知是高还是低)
		List<圖形> 圖形_高低平台List = new ArrayList();
		平台list = 高臺計算Util.設置高低平臺(平台list, 折点list3);
		平臺計算 o平臺計算 = null;
		
		List<折点>折點list_優化後 = new ArrayList();
		for(平台 p : 平台list) {
			// 由于是各算个的。所以只有高点的类型为对象外
			//		if(p.getI類型() == CommonConst.平台_類型_高点) {
			//			折點list_優化後.addAll(平台Util2.取得指定平台内折点(p, 折点list3));
			//		}
			//int 高低; // 0=高 1=低	
			if(p.get高低() == CommonConst.平台_高低_高) {
				o平臺計算 = new 高臺計算();
			}
			if(p.get高低() == CommonConst.平台_高低_低) {
				o平臺計算 = new 低臺計算();
			}
			List<折点>單一平臺優化後 = o平臺計算.排除幹擾(折点list2, 折点list3, p);
			單一平臺優化後 = o平臺計算.平台充实(折点list1, 單一平臺優化後, p);
			p.set平台折点list(單一平臺優化後);
			
		}
		
		// 圖形計算
		for(平台 p : 平台list) {
			
			圖形計算1 o圖形計算_M頭_頭肩頂 = new 圖形計算_M頭_頭肩頂1();
			
			圖形 o圖形 =o圖形計算_M頭_頭肩頂.圖形判别(p, 折點list_優化後, 折点list3);
			
			o圖形 = o圖形計算_M頭_頭肩頂.趨勢計算(o圖形, 折点list1, 折点list2, 折点list3);
			
			圖形_高低平台List.add(o圖形);
			
		}
		
		return 圖形_高低平台List;
	}
}
